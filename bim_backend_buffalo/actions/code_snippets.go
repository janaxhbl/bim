package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"bim_backend_buffalo/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (CodeSnippet)
// DB Table: Plural (code_snippets)
// Resource: Plural (CodeSnippets)
// Path: Plural (/code_snippets)
// View Template Folder: Plural (/templates/code_snippets/)

// CodeSnippetsResource is the resource for the CodeSnippet model
type CodeSnippetsResource struct {
	buffalo.Resource
}

// List gets all CodeSnippets. This function is mapped to the path
// GET /code_snippets
func (v CodeSnippetsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	codeSnippets := &models.CodeSnippets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all CodeSnippets from the DB
	if err := q.All(codeSnippets); err != nil {
		return err
	}

	// not really nessesary
	// Eager load the associated User
	// for i := range *codeSnippets {
	// 	if err := tx.Load(&(*codeSnippets)[i], "User"); err != nil {
	// 		return err
	// 	}
	// }

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("codeSnippets", codeSnippets)
		return c.Render(http.StatusOK, r.HTML("code_snippets/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(codeSnippets))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(codeSnippets))
	}).Respond(c)
}

// Show gets the data for one CodeSnippet. This function is mapped to
// the path GET /code_snippets/{code_snippet_id}
func (v CodeSnippetsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty CodeSnippet
	codeSnippet := &models.CodeSnippet{}

	// To find the CodeSnippet the parameter code_snippet_id is used.
	if err := tx.Find(codeSnippet, c.Param("code_snippet_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// not really nessesary
	// Eager load the associated User
	// if err := tx.Load(codeSnippet, "User"); err != nil {
	// 	return err
	// }

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("codeSnippet", codeSnippet)

		return c.Render(http.StatusOK, r.HTML("code_snippets/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(codeSnippet))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(codeSnippet))
	}).Respond(c)
}

// ListByUser gets all CodeSnippets for one user. This function is mapped to the path
// GET /code_snippets/user/{user_id}
func (v CodeSnippetsResource) ListByUser(c buffalo.Context) error {
	userID := c.Param("user_id")

	tx := models.DB
	codeSnippets := &models.CodeSnippets{}

	err := tx.Where("user_id = ?", userID).All(codeSnippets)
	if err != nil {
		return c.Render(http.StatusInternalServerError, r.JSON(map[string]string{"error": err.Error()}))
	}

	return c.Render(http.StatusOK, r.JSON(codeSnippets))
}

// Create adds a CodeSnippet to the DB. This function is mapped to the
// path POST /code_snippets
func (v CodeSnippetsResource) Create(c buffalo.Context) error {
	// Allocate an empty CodeSnippet
	codeSnippet := &models.CodeSnippet{}

	// Bind codeSnippet to the html form elements
	if err := c.Bind(codeSnippet); err != nil {
		return err
	}

	userID, ok := c.Value("userID").(int)
	if !ok {
		return c.Render(http.StatusUnauthorized, r.JSON(map[string]string{"error": "Failed to get userID"}))
	}
	codeSnippet.UserID = userID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(codeSnippet)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("codeSnippet", codeSnippet)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("code_snippets/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	// not really nessesary
	// Eager load the associated User
	// if err := tx.Load(codeSnippet, "User"); err != nil {
	// 	return err
	// }

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "codeSnippet.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/code_snippets/%v", codeSnippet.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(codeSnippet))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(codeSnippet))
	}).Respond(c)
}

// Update changes a CodeSnippet in the DB. This function is mapped to
// the path PUT /code_snippets/{code_snippet_id}
func (v CodeSnippetsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty CodeSnippet
	codeSnippet := &models.CodeSnippet{}

	if err := tx.Find(codeSnippet, c.Param("code_snippet_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind CodeSnippet to the html form elements
	if err := c.Bind(codeSnippet); err != nil {
		return err
	}

	userID, ok := c.Value("userID").(int)
	if !ok || codeSnippet.UserID != userID {
		return c.Render(http.StatusForbidden, r.JSON(map[string]string{"error": "You are not allowed to update this code snippet!"}))
	}

	verrs, err := tx.ValidateAndUpdate(codeSnippet)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("codeSnippet", codeSnippet)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("code_snippets/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "codeSnippet.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/code_snippets/%v", codeSnippet.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(codeSnippet))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(codeSnippet))
	}).Respond(c)
}

// Destroy deletes a CodeSnippet from the DB. This function is mapped
// to the path DELETE /code_snippets/{code_snippet_id}
func (v CodeSnippetsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty CodeSnippet
	codeSnippet := &models.CodeSnippet{}

	// To find the CodeSnippet the parameter code_snippet_id is used.
	if err := tx.Find(codeSnippet, c.Param("code_snippet_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	userID, ok := c.Value("userID").(int)
	if !ok || codeSnippet.UserID != userID {
		return c.Render(http.StatusForbidden, r.JSON(map[string]string{"error": "You are not allowed to delete this code snippet!"}))
	}

	if err := tx.Destroy(codeSnippet); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "codeSnippet.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/code_snippets")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(codeSnippet))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(codeSnippet))
	}).Respond(c)
}
